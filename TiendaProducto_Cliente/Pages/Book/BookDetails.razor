@page "/store/book-detail/{Id:int}"
@using TiendaProducto_Cliente.Helpers
@using Microsoft.AspNetCore.Authorization
@using Models.Api;
@inject IJSRuntime JsRuntime;
@inject IBookService bookService;
@inject IStripePaymentService stripePayment;
@inject IBookOrderDetailService orderDetailService;
@inject ILocalStorageService localStorage;

@attribute [Authorize(Roles = ConstantsCommon.Role_Client)]


@if (BookOrder?.OrderDetails?.BookDto?.BookImages == null)
{
    <div class="spinner"></div>
}
else
{

    <div class="mt-4 mx-4 px-0 px-md-5 mx-md-5">

        <div class="row p-2 my-3 " style="border-radius:20px; ">
            <div class="col-12 col-lg-7 p-4" style="border: 1px solid #87bdd8">
                <div class="row px-2 text-primary border-bottom">
                    <div class="col-8 py-1"><p style="font-size:x-large;margin:0px;">Selected book</p></div>
                    <div class="col-4 p-0"><a href="tienda/libros" class="btn btn-secondary btn-block">Back to catalog</a></div>
                </div>

                <div class="row">
                    <div class="col-6">
                        <div id="" class="carousel slide mb-4 m-md-3 m-0 pt-3 pt-md-0" data-ride="carousel">
                            <div id="carouselExampleIndicators" class="carousel slide" data-ride="carousel">
                                <ol class="carousel-indicators">
                                    <li data-target="#carouselExampleIndicators" data-slide-to="0" class="active"></li>
                                    <li data-target="#carouselExampleIndicators" data-slide-to="1"></li>
                                </ol>
                                <div class="carousel-inner">
                                    <div class="carousel-item active">
                                        <img class="d-block w-100" src="images/imagen1.png" alt="First slide">
                                    </div>
                                </div>
                                <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Previous</span>
                                </a>
                                <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="sr-only">Next</span>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="col-6">
                        <span class="float-right pt-4">
                            <span class="float-right">Autor : @BookOrder.OrderDetails.BookDto.Author</span><br />
                            <h4 class="text-primary font-weight-bold pt-5 pl-5">USD <span style="border-bottom:1px solid #ff6a00"> @BookOrder.OrderDetails.BookDto.Regular_price.ToString("#,#.00#;(#,#.00#)")</span></h4>
                        </span>
                    </div>
                </div>
                <div class="row p-2">
                    <div class="col-12">
                        <p class="card-title text-primary" style="font-size:xx-large">@BookOrder.OrderDetails.BookDto.Name</p>
                        <p class="card-text" style="font-size:large">
                            @((MarkupString)BookOrder.OrderDetails.BookDto.Details)
                        </p>
                    </div>

                </div>
            </div>

            <div class="col-12 col-lg-5 p-4 2 mt-4 mt-md-0" style="border: 1px solid #87bdd8;">
                <EditForm Model="BookOrder" class="container" OnValidSubmit="HandlePurchase">


                    <div class="row px-2 text-primary border-bottom"><div class="col-7 py-1"><p style="font-size:x-large;margin:0px;">Ingresa tus Datos</p></div></div>

                    <div class="form-group pt-2">
                        <label class="text-primary">Name</label>
                        <InputText @bind-Value="BookOrder.OrderDetails.Name" type="text" class="form-control" />
                    </div>
                    <div class="form-group pt-2">
                        <label class="text-primary">Phone</label>
                        <InputText @bind-Value="BookOrder.OrderDetails.PhoneNo" type="text" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label class="text-primary">Email</label>
                        <InputText @bind-Value="BookOrder.OrderDetails.Email" type="text" class="form-control" />
                    </div>
                    <div class="form-group">
                        <button type="submit" class="btn btn-primary form-control">Buy now</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {

    [Parameter]
    public int? Id { get; set; }

    public BookOrderVM BookOrder { get; set; } = new BookOrderVM();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            BookOrder.OrderDetails = new BookOrderDetailsDto();

            if (Id != null)
                BookOrder.OrderDetails.BookDto = await bookService.GetBookAsync(Id.Value);

            var userInfo = await localStorage.GetItemAsync<UserDto>(ConstantsCommon.LS_UserDetails);
            if (userInfo != null)
            {
                BookOrder.OrderDetails.UserId = userInfo.Id;
                BookOrder.OrderDetails.Name = userInfo.Name;
                BookOrder.OrderDetails.PhoneNo = userInfo.PhoneNo;
                BookOrder.OrderDetails.Email = userInfo.Email;
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastError(ex.Message);
        }
    }

    private async Task HandlePurchase()
    {
        if (!await HandleValidaions())
        {
            return;
        }

        try
        {
            var paymentDto = new StripePaymentDto()
            {
                Amount = Convert.ToInt32(BookOrder.OrderDetails.BookDto.Regular_price * 100),
                ProductName = BookOrder.OrderDetails.BookDto.Name,
                ReturnUrl = $"store/book-detail/{Id}"
            };

            var result = await stripePayment.CheckoutAsync(paymentDto);

            BookOrder.OrderDetails.StripeSessionId = result.Data.ToString();
            BookOrder.OrderDetails.BookId = BookOrder.OrderDetails.BookDto.Id;
            BookOrder.OrderDetails.TotalCost = BookOrder.OrderDetails.BookDto.Regular_price;

            var savedOrderDetails = await orderDetailService.SaveOrderDetailAsync(BookOrder.OrderDetails);

            await localStorage.SetItemAsync(ConstantsCommon.LS_OrderDetails, savedOrderDetails);

            await JsRuntime.InvokeVoidAsync("redirectToCheckout", result.Data.ToString());
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastError(ex.Message);
        }

    }

    private async Task<bool> HandleValidaions()
    {
        if (string.IsNullOrEmpty(BookOrder.OrderDetails.Name))
        {
            await JsRuntime.ToastError("The name must not be empty");
            return false;
        }

        if (string.IsNullOrEmpty(BookOrder.OrderDetails.PhoneNo))
        {
            await JsRuntime.ToastError("The phone number must not be empty");
            return false;
        }

        if (string.IsNullOrEmpty(BookOrder.OrderDetails.Email))
        {
            await JsRuntime.ToastError("The email must not be empty");
            return false;
        }

        return true;
    }
}
