@page "/book/addbook";
@page "/book/updatebook/{Id:int}"
@using Models;
@using Business.Repositories.IRepository;
@using  TiendaProducto_Server.Services.IService;
@using Blazored.TextEditor;
@inject IBookRepository bookRepo;
@inject IBookImagesRepository bookImagesRepo;
@inject IFileUpload fileUpload;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;


<div class="row mt-2 mb-5">
    <h3 class="card-title text-primary mb-3 ml-3 ">@Title Book</h3>

    <div class="col-md-12">
        <EditForm Model="@BookModel" OnValidSubmit="HandleBook">
            <DataAnnotationsValidator />
            @*<ValidationSummary/>*@
            <div class="form-group">
                <label>Name</label>
                <InputText @bind-Value="BookModel.Name" class="form-control"></InputText>
                <ValidationMessage For="()=> BookModel.Name" />
            </div>

            <div class="form-group">
                <label>Price</label>
                <InputNumber @bind-Value="BookModel.Regular_price" class="form-control"></InputNumber>
                <ValidationMessage For="()=> BookModel.Regular_price" />
            </div>

            <div class="form-group">
                <label>Author</label>
                <InputText @bind-Value="BookModel.Author" class="form-control"></InputText>
                <ValidationMessage For="()=> BookModel.Author" />
            </div>

            <div class="form-group " style="height: 300px">
                <label>Details</label>
                @*<InputTextArea @bind-Value="BookModel.Details" class="form-control"></InputTextArea>*@
                <BlazoredTextEditor @ref="@QuillHtml" Placeholder="Enter a book description">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>

                    </EditorContent>
                </BlazoredTextEditor>
            </div>

            <div class="form-group" style="padding-top: 70px; padding-bottom: 90px">
                <InputFile OnChange="HandleUploadImages" multiple></InputFile>
                <div class="row">
                    @if (IsLoadingImages)
                    {
                        <div class="col-md-12">
                            <span class="text-black-50">
                                <i class="fa fa-spin fa-spinner"></i>
                                Wait! Loading images...
                            </span>
                        </div>
                    }
                    @if (BookModel.ImagesUrl != null && BookModel.ImagesUrl.Count > 0)
                    {
                        int counter = 1;
                        @foreach (var imageURL in BookModel.ImagesUrl)
                        {
                            <div class="col-md-2 mt-3">
                                <div class="img-book" style="background: url('@imageURL') 50% 50%">
                                    <span class="img-book-title">@counter</span>
                                </div>
                                <button class="btn btn-outline-danger btn-block mt-4" type="button" @onclick="() => DeleteImage(imageURL)">
                                    Delete
                                </button>
                            </div>
                            counter++;
                        }
                    }
                </div>
            </div>

            <div class="form-group">
                <button class="btn btn-primary">@Title book</button>
                <NavLink href="book" class="btn btn-secundary">Go Back</NavLink>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private BookDto BookModel { get; set; } = new BookDto();
    private string Title { get; set; } = "Add";
    private BookImagesDto BookImages { get; set; }
    private List<string> ImagesToDelete { get; set; } = new List<string>();
    public bool IsLoadingImages { get; set; } = false;
    public BlazoredTextEditor QuillHtml { get; set; } = new BlazoredTextEditor();

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            //Update a record
            Title = "Update";
            BookModel = await bookRepo.GetBookByIdAsync(Id.Value);
            if (BookModel?.BookImages != null)
            {
                BookModel.ImagesUrl = BookModel.BookImages.Select(url => url.BookImageUrl).ToList();
            }
        }
        else
        {
            //add a new record
            BookModel = new BookDto();
        }


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        bool loading = true;
        while (loading)
        {
            try
            {
                if (!string.IsNullOrEmpty(BookModel.Details))
                {
                    await this.QuillHtml.LoadHTMLContent(BookModel.Details);
                }
                loading = false;
            }
            catch (Exception)
            {
                await Task.Delay(10);
                loading = true;
            }
        }

    }

    private async Task HandleBook()
    {
        try
        {
            //check if bookexist
            var ifBookExist = await bookRepo.BookExistAsync(BookModel.Name, BookModel.Id);

            if (ifBookExist != null)
            {
                await JsRuntime.ToastError("This book name already exists");
                return;
            }


            //update a bookk
            if (BookModel.Id != 0 && Title == "Update")
            {
                BookModel.Details = await QuillHtml.GetHTML();

                var updatedBook = await bookRepo.UpdateBookAsync(BookModel, Id.Value);
                if (BookModel.ImagesUrl != null && BookModel.ImagesUrl.Any())
                {
                    if (ImagesToDelete != null && ImagesToDelete.Any())
                    {
                        foreach (var itemUrl in ImagesToDelete)
                        {
                            var imgName = itemUrl.Replace($"images_books", "");
                            var result = fileUpload.DeleteFile(imgName);
                            await bookImagesRepo.DeleteBookImageByUrlAsync(itemUrl);
                        }
                    }
                    await AddBookImages(updatedBook);
                }
                await JsRuntime.ToastSuccess("book updated successfully");


            }
            else //add a book
            {
                BookModel.Details = await QuillHtml.GetHTML();
                var addedBook = await bookRepo.CreateBookAsync(BookModel);
                await AddBookImages(addedBook);
                await JsRuntime.ToastSuccess("book added successfully");

            }
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastError(ex.Message);
        }



        NavigationManager.NavigateTo("book");
    }

    private async Task HandleUploadImages(InputFileChangeEventArgs e)
    {
        IsLoadingImages = true;
        try
        {
            var imagesLst = new List<string>();

            if (e.GetMultipleFiles().Count > 0)
            {
                foreach (var img in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileInfo = new System.IO.FileInfo(img.Name);

                    if (fileInfo.Extension == ".jpg" ||
                        fileInfo.Extension == ".jpeg" ||
                        fileInfo.Extension == ".png")
                    {
                        var pathFileUpload = await fileUpload.UploadFileAsync(img);
                        imagesLst.Add(pathFileUpload);
                    }
                    else
                    {
                        await JsRuntime.ToastError("Please select files with the extension .jpg .jpeg or .png");
                        return;
                    }
                }

                if (imagesLst.Any())
                {
                    if (BookModel.ImagesUrl != null && BookModel.ImagesUrl.Any())
                    {
                        BookModel.ImagesUrl.AddRange(imagesLst);
                    }
                    else
                    {
                        BookModel.ImagesUrl = new List<string>();
                        BookModel.ImagesUrl.AddRange(imagesLst);

                    }
                }
                else
                {
                    await JsRuntime.ToastError("could not upload images");
                    return;
                }
            }

            IsLoadingImages = false;
        }
        catch (Exception ex)
        {
            await JsRuntime.ToastError(ex.Message);
            IsLoadingImages = false;
        }

        IsLoadingImages = false;
    }

    private async Task AddBookImages(BookDto book)
    {
        foreach (var imgUrl in BookModel.ImagesUrl)
        {
            if (BookModel.BookImages == null ||
                BookModel.BookImages.Where(x => x.BookImageUrl == imgUrl).Count() == 0)
            {
                BookImages = new BookImagesDto()
                {
                    BookId = book.Id,
                    BookImageUrl = imgUrl
                };

                await bookImagesRepo.AddBookImageAsync(BookImages);
            }

        }
    }

    internal async Task DeleteImage(string imgUrl)
    {
        try
        {
            var imgIndex = BookModel.ImagesUrl.FindIndex(x => x == imgUrl);//get url index
            var imgName = imgUrl.Replace($"images_books", "");

            if (Id == null && Title == "Add")
            {
                var result = fileUpload.DeleteFile(imgName);
            }
            else
            {
                ImagesToDelete ??= new List<string>();
                ImagesToDelete.Add(imgUrl);
            }

            BookModel.ImagesUrl.RemoveAt(imgIndex);


        }
        catch (Exception ex)
        {
            await JsRuntime.ToastError(ex.Message);
        }
    }
}
