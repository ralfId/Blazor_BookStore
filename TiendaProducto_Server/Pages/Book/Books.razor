@page "/book";
@using Models;
@using Business.Repositories.IRepository;
@inject IBookRepository bookRepo;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;
@inject TiendaProducto_Server.Services.IService.IFileUpload fileUpload;

<div class=" row mt-4">
    <div class="col-8">
        <h4 class="card-title text-primary">Books</h4>
    </div>

    <div class="col-3 offset-1">
        <NavLink href="book/addbook" class="btn btn-primary form-control">Add new book</NavLink>
    </div>

    <div class=" row mt-4">
        <div class="col-12">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Author</th>
                        <th>Price</th>
                        <th>Details</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @if (booksList.Any())
                    {
                        foreach (var book in booksList)
                        {
                            <tr>
                                <td>@book.Name</td>
                                <td>@book.Author</td>
                                <td>@book.Regular_price</td>
                                <td>@book.Details</td>
                                <td>
                                    <NavLink href="@($"/book/updatebook/{book.Id}")" class="btn btn-primary">
                                        Update
                                    </NavLink>
                                    <button class="btn btn-danger" type="button" @onclick="() => HandleDeleteBook(book.Id)">
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5"> No results</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


<Modal_DeleteConfirmation ConfirmChanged="ConfirmDelete_Click"></Modal_DeleteConfirmation>

@code {

    private IEnumerable<BookDto> booksList { get; set; } = new List<BookDto>();
    private int? BookId { get; set; } = null;
    protected override async Task OnInitializedAsync()
    {
        booksList = await bookRepo.GetAllBooksAsync();
    }

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await JsRuntime.InvokeVoidAsync("ShowModalDeleteConfirmation");
    //}

    private async Task HandleDeleteBook(int bookId)
    {
        BookId = bookId;
        await JsRuntime.InvokeVoidAsync("ShowModalDeleteConfirmation");
    }

    public async Task ConfirmDelete_Click(bool ConfirmDelete)
    {
        await Task.Delay(3000);
        if (ConfirmDelete && BookId != null)
        {
            var bookToDelete = await bookRepo.GetBookByIdAsync(BookId.Value);

            foreach (var item in bookToDelete.BookImages)
            {
                var imgName = item.BookImageUrl.Replace($"images_books", "");
                fileUpload.DeleteFile(imgName); //delete image from folder
            }

            await bookRepo.DeleteBookAsync(BookId.Value);
            booksList = await bookRepo.GetAllBooksAsync();
            await JsRuntime.ToastSuccess("book removed successfully");
        }
        await JsRuntime.InvokeVoidAsync("HideModalDeleteConfirmation");
    }


}
